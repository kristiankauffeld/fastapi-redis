services:
  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - 8000:8000
    environment:
      - REDIS_URL=${REDIS_URL}
    volumes:
      - ./src:/app/src:z
    depends_on:
      #rabbit:
      #condition: service_healthy
      redis:
        condition: service_started
    restart: 'no'

  redis:
    image: redis:latest
    ports:
      - '6379:6379'
    environment:
      - REDIS_PASSWORD=sEcRet
    restart: on-failure

  #rabbit:
  #  image: rabbitmq:3.9.21-management
  #  healthcheck:
  #    test: ['CMD', 'rabbitmq-diagnostics', '-q', 'ping']
  #    interval: 30s
  #    timeout: 30s
  #    retries: 3
  #  ports:
  #    - '5672:5672'
  #    - '15672:15672'
  #  expose:
  #    - '5672'
  #    - '15672'
  #  restart: always
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt
